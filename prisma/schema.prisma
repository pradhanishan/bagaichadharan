datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH MODELS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  // sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// PRODUCT MODELS
model Product {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  description       String?
  productCategoryId Int
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isActive          Boolean         @default(true)

  sales Sales[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[] // Relation field for the one-to-many relationship
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
}

model RestaurantTable {
  id        Int      @id @default(autoincrement())
  number    Int      @unique
  seats     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model Sales {
  id             String   @id @default(cuid())
  tranDate       Int
  transactionNo  String
  quantitySold   Float
  amountSold     Float
  discountAmount Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  staffId Int
  staff   Staff @relation(fields: [staffId], references: [id])
}

model Staff {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean

  sales Sales[]
}
